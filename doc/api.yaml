openapi: 3.0.0
paths:
  /user:
    get:
      description: Gets all users
      operationId: UserController_findAll
      parameters: []
      responses:
        '200':
          description: Returns all users records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      summary: Get all users
      tags:
        - User
    post:
      description: Creates a new user
      operationId: UserController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Returns if user has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Returns if request body does not contain required fields
      summary: Create user
      tags:
        - User
  /user/{id}:
    get:
      description: Get single user by id
      operationId: UserController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Returns if user record exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Returns if user ID is not valid UUID
        '404':
          description: Returns if user record does't exist
      summary: Get single user by id
      tags:
        - User
    put:
      description: Updates a user's password by ID
      operationId: UserController_updatePassword
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Returns if user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Returns if user ID is not valid UUID
        '403':
          description: Returns if old password is wrong
        '404':
          description: Returns if user does not exist
      summary: Update a user's password
      tags:
        - User
    delete:
      description: Deletes user by ID
      operationId: UserController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: User ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if user has been removed
        '400':
          description: Returns if user ID is not valid UUID
        '404':
          description: Returns if user does not exist
      summary: Delete user
      tags:
        - User
  /artist:
    get:
      description: Gets all artists
      operationId: ArtistController_findAll
      parameters: []
      responses:
        '200':
          description: Returns all artists records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      summary: Get all artists
      tags:
        - Artist
    post:
      description: Add new artist
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Returns if artist has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Returns if request body does not contain required fields
      summary: Add new artist
      tags:
        - Artist
  /artist/{id}:
    get:
      description: Get single artist by id
      operationId: ArtistController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Returns if artist record exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Returns if artist ID is not valid UUID
        '404':
          description: Returns if artist record does't exist
      summary: Get single artist by id
      tags:
        - Artist
    put:
      description: Update artist information by UUID
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Returns if artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Returns if artist ID is not valid UUID
        '404':
          description: Returns if artist does not exist
      summary: Update artist information
      tags:
        - Artist
    delete:
      description: Delete artist from library
      operationId: ArtistController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if artist has been removed
        '400':
          description: Returns if artist ID is not valid UUID
        '404':
          description: Returns if artist does not exist
      summary: Delete artist
      tags:
        - Artist
  /track:
    get:
      description: Gets all library tracks list
      operationId: TrackController_findAll
      parameters: []
      responses:
        '200':
          description: Returns all tracks records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      summary: Get tracks list
      tags:
        - Track
    post:
      description: Add new track information
      operationId: TrackController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Returns if track has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Returns if request body does not contain required fields
      summary: Add new track
      tags:
        - Track
  /track/{id}:
    get:
      description: Get single track by id
      operationId: TrackController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Returns if track record exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Returns if track ID is not valid UUID
        '404':
          description: Returns if track record does't exist
      summary: Get single track by id
      tags:
        - Track
    put:
      description: Update library track information by UUID
      operationId: TrackController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Returns if track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Returns if track ID is not valid UUID
        '404':
          description: Returns if track does not exist
      summary: Update track information
      tags:
        - Track
    delete:
      description: Delete track from library
      operationId: TrackController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if track has been removed
        '400':
          description: Returns if track ID is not valid UUID
        '404':
          description: Returns if track does not exist
      summary: Delete track
      tags:
        - Track
  /album:
    get:
      description: Gets all library albums list
      operationId: AlbumController_findAll
      parameters: []
      responses:
        '200':
          description: Returns all albums records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      summary: Get albums list
      tags:
        - Album
    post:
      description: Add new album information
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Returns if album has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Returns if request body does not contain required fields
      summary: Add new album
      tags:
        - Album
  /album/{id}:
    get:
      description: Get single album by id
      operationId: AlbumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: Returns if album record exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Returns if album ID is not valid UUID
        '404':
          description: Returns if album record does't exist
      summary: Get single album by id
      tags:
        - Album
    put:
      description: Update library album information by UUID
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Returns if album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Returns if album ID is not valid UUID
        '404':
          description: Returns if album does not exist
      summary: Update album information
      tags:
        - Album
    delete:
      description: Delete album from library
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if album has been removed
        '400':
          description: Returns if album ID is not valid UUID
        '404':
          description: Returns if album does not exist
      summary: Delete album
      tags:
        - Album
  /favs:
    get:
      description: Gets all favorites artists, albums and tracks
      operationId: FavsController_findAll
      parameters: []
      responses:
        '200':
          description: Returns all favorites records
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favs'
      summary: Get all favorites
      tags:
        - Favs
  /favs/track/{id}:
    post:
      description: Add track to the favorites
      operationId: FavsController_addTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Returns if track has been added to the favorites
        '400':
          description: Returns if track ID is not valid UUID
        '422':
          description: Returns if track with ID does not exist
      summary: Add track to the favorites
      tags:
        - Favs
    delete:
      description: Delete track from favorites
      operationId: FavsController_removeTrack
      parameters:
        - name: id
          required: true
          in: path
          description: Track ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if track has been removed
        '400':
          description: Returns if track ID is not valid UUID
        '404':
          description: Returns if track is not favorite
      summary: Delete track from favorites
      tags:
        - Favs
  /favs/album/{id}:
    post:
      description: Add album to the favorites
      operationId: FavsController_addAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Returns if album has been added to the favorites
        '400':
          description: Returns if album ID is not valid UUID
        '422':
          description: Returns if album with ID does not exist
      summary: Add album to the favorites
      tags:
        - Favs
    delete:
      description: Delete album from favorites
      operationId: FavsController_removeAlbum
      parameters:
        - name: id
          required: true
          in: path
          description: Album ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if album has been removed
        '400':
          description: Returns if album ID is not valid UUID
        '404':
          description: Returns if album is not favorite
      summary: Delete album from favorites
      tags:
        - Favs
  /favs/artist/{id}:
    post:
      description: Add artist to the favorites
      operationId: FavsController_addArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: Returns if artist has been added to the favorites
        '400':
          description: Returns if artist ID is not valid UUID
        '422':
          description: Returns if artist with ID does not exist
      summary: Add artist to the favorites
      tags:
        - Favs
    delete:
      description: Delete artist from favorites
      operationId: FavsController_removeArtist
      parameters:
        - name: id
          required: true
          in: path
          description: Artist ID
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Returns if artist has been removed
        '400':
          description: Returns if artist ID is not valid UUID
        '404':
          description: Returns if artist is not favorite
      summary: Delete artist from favorites
      tags:
        - Favs
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: TestUser
        version:
          type: number
          example: 1
        createdAt:
          type: number
          description: Timestamp of creation
          example: 1655000000
        updatedAt:
          type: number
          description: Timestamp of last update
          example: 1655000000
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: The user's login
        password:
          type: string
          description: The user's password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password
        newPassword:
          type: string
          description: The user's new password
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Freddie Mercury
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
        albumId:
          type: string
          description: Refers to Album
          nullable: true
          format: uuid
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Bohemian Rhapsody
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
        albumId:
          type: string
          description: Refers to Album
          nullable: true
          format: uuid
        duration:
          type: integer
          description: In seconds
          example: 355
      required:
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Bohemian Rhapsody
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
        albumId:
          type: string
          description: Refers to Album
          nullable: true
          format: uuid
        duration:
          type: integer
          description: In seconds
          example: 355
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Innuendo
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
      required:
        - id
        - name
        - year
        - artistId
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: integer
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: integer
        artistId:
          type: string
          description: Refers to Artist
          nullable: true
          format: uuid
    Favs:
      type: object
      properties:
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
      required:
        - tracks
        - albums
        - artists
